(function (React) {
	'use strict';

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var React__default = /*#__PURE__*/_interopDefault(React);

	const CustomImage = props => {
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    id: "custom-component"
	  }, /*#__PURE__*/React__default.default.createElement("img", {
	    src: props.record.params.img,
	    alt: props.record.params.title,
	    style: {
	      'object-fit': 'cover',
	      width: '250px',
	      height: '187px'
	    }
	  }));
	};

	const CustomTitle = props => {
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    id: "custom-link"
	  }, /*#__PURE__*/React__default.default.createElement("span", null, props.record.params.title), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("a", {
	    href: props.record.params.link,
	    target: "_blank"
	  }, /*#__PURE__*/React__default.default.createElement("div", {
	    style: {
	      padding: '5px',
	      'background-color': 'darkgray',
	      color: 'white',
	      'border-radius': '5px',
	      'text-align': 'center'
	    }
	  }, /*#__PURE__*/React__default.default.createElement("span", null, "See announcement to https:"), /*#__PURE__*/React__default.default.createElement("span", null, "www.mobile.bg"))));
	};

	const ContentParser = () => {
	  const [brands, setBrands] = React.useState([]);
	  const [models, setModels] = React.useState([]);
	  const [selectedBrand, setSelectedBrand] = React.useState('');
	  const [selectedModel, setSelectedModel] = React.useState('');
	  const [url, setUrl] = React.useState('https://www.mobile.bg');
	  const [productionYearFrom, setProductionYearFrom] = React.useState('2017');
	  const [productionYearTo, setProductionYearTo] = React.useState('');
	  const [priceFrom, setPriceFrom] = React.useState('');
	  const [priceTo, setPriceTo] = React.useState('');
	  const [errors, setErrors] = React.useState({});
	  // const validate = () => {
	  // 	const newErrors = {}
	  // 	if (!selectedCategory) newErrors.selectedBrand = 'Category is required'
	  //
	  // 	return newErrors
	  // }
	  const handleSubmit = async event => {
	    console.log('event -> ', event);
	    event.preventDefault();
	    // const newErrors = validate()
	    // if (Object.keys(newErrors).length > 0) {
	    // 	setErrors(newErrors)
	    // 	return
	    // }
	    const data = {
	      url,
	      selectedBrand,
	      selectedModel,
	      productionYearFrom,
	      productionYearTo,
	      priceFrom,
	      priceTo
	    };
	    try {
	      const response = await fetch('http://localhost:8080/announcements/parsingContentByParams', {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify(data)
	      });
	      if (response.ok) {
	        console.log('Data submitted successfully');
	      } else {
	        console.error('Failed to submit data');
	      }
	    } catch (error) {
	      console.error('Error:', error);
	    }
	  };

	  // Fetch brands on component mount
	  React.useEffect(() => {
	    fetch('/brand/models/options?option=brands').then(response => response.json()).then(data => {
	      setBrands(data.options);
	      console.log('data.options -> ', data.options);
	    }).catch(error => {
	      console.error('Error fetching brands:', error);
	    });
	  }, []);

	  // Fetch models when a brand is selected
	  React.useEffect(() => {
	    if (selectedBrand) {
	      fetch(`/brand/models/options?option=${selectedBrand}`).then(response => response.json()).then(data => {
	        setModels(data.options);
	        console.log('data.options -> ', data.options);
	      }).catch(error => {
	        console.error('Error fetching models:', error);
	      });
	    }
	  }, [selectedBrand]);
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    className: "custom-page"
	  }, /*#__PURE__*/React__default.default.createElement("h1", null, "Parser form"), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("form", {
	    onSubmit: handleSubmit
	  }, /*#__PURE__*/React__default.default.createElement("div", {
	    className: "form-group"
	  }, /*#__PURE__*/React__default.default.createElement("label", {
	    htmlFor: "brand"
	  }, "Brand:"), /*#__PURE__*/React__default.default.createElement("select", {
	    id: "brand",
	    value: selectedBrand,
	    onChange: e => setSelectedBrand(e.target.value)
	  }, /*#__PURE__*/React__default.default.createElement("option", {
	    value: ""
	  }, "Select a brand"), brands.map(brand => /*#__PURE__*/React__default.default.createElement("option", {
	    key: brand,
	    value: brand
	  }, brand))), errors.selectedBrand && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.selectedBrand)), /*#__PURE__*/React__default.default.createElement("div", {
	    className: "form-group"
	  }, /*#__PURE__*/React__default.default.createElement("label", {
	    htmlFor: "model"
	  }, "Model:"), /*#__PURE__*/React__default.default.createElement("select", {
	    id: "model",
	    value: selectedModel,
	    onChange: e => setSelectedModel(e.target.value)
	  }, /*#__PURE__*/React__default.default.createElement("option", {
	    value: ""
	  }, "Select a model"), models.map(model => /*#__PURE__*/React__default.default.createElement("option", {
	    key: model,
	    value: model
	  }, model))), errors.selectedModel && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.selectedModel)), /*#__PURE__*/React__default.default.createElement("div", {
	    className: "form-group"
	  }, /*#__PURE__*/React__default.default.createElement("label", null, "Production Years (by default is 2017):"), /*#__PURE__*/React__default.default.createElement("select", {
	    value: productionYearFrom,
	    onChange: e => setProductionYearFrom(e.target.value)
	  }, /*#__PURE__*/React__default.default.createElement("option", {
	    value: "2017"
	  }, "Select year"), yearsFromAnyToCurrent().map((year, index) => /*#__PURE__*/React__default.default.createElement("option", {
	    key: index,
	    value: year
	  }, year))), errors.productionYearFrom && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.productionYearFrom), /*#__PURE__*/React__default.default.createElement("select", {
	    value: productionYearTo,
	    onChange: e => setProductionYearTo(e.target.value)
	  }, /*#__PURE__*/React__default.default.createElement("option", {
	    value: ""
	  }), yearsFromAnyToCurrent().map((year, index) => /*#__PURE__*/React__default.default.createElement("option", {
	    key: index,
	    value: year
	  }, year))), errors.productionYearTo && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.productionYearTo)), /*#__PURE__*/React__default.default.createElement("div", {
	    className: "form-group price-interval",
	    style: {
	      'margin-bottom': '15px'
	    }
	  }, /*#__PURE__*/React__default.default.createElement("label", null, "Price:"), /*#__PURE__*/React__default.default.createElement("div", {
	    className: "interval"
	  }, /*#__PURE__*/React__default.default.createElement("input", {
	    type: "number",
	    placeholder: "From",
	    value: priceFrom,
	    onChange: e => setPriceFrom(e.target.value)
	  }), errors.priceFrom && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.priceFrom), /*#__PURE__*/React__default.default.createElement("input", {
	    type: "number",
	    placeholder: "To",
	    value: priceTo,
	    onChange: e => setPriceTo(e.target.value)
	  }), errors.priceTo && /*#__PURE__*/React__default.default.createElement("span", {
	    className: "error"
	  }, errors.priceTo))), /*#__PURE__*/React__default.default.createElement("button", {
	    type: "submit"
	  }, "Run parser")));
	};
	function yearsFromAnyToCurrent(startYear = 2017) {
	  const currentYear = new Date().getFullYear();
	  const years = [];
	  for (let year = startYear; year <= currentYear; year++) {
	    years.push(year);
	  }
	  return years;
	}

	const SettingsPage = props => {
	  const handleSubmit = async e => {
	    e.preventDefault();
	    try {
	      const response = await fetch('http://localhost:8080/options/create', {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify({})
	      });
	      console.log('Record saved:', response.data);
	    } catch (error) {
	      console.error('Error saving record:', error);
	    }
	  };
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    id: "settings-page"
	  }, /*#__PURE__*/React__default.default.createElement("h2", null, /*#__PURE__*/React__default.default.createElement("span", null, "Settings")), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("button", {
	    type: "submit",
	    onClick: handleSubmit
	  }, "Init"));
	};

	AdminJS.UserComponents = {};
	AdminJS.UserComponents.CustomImage = CustomImage;
	AdminJS.UserComponents.CustomTitle = CustomTitle;
	AdminJS.UserComponents.ContentParserPage = ContentParser;
	AdminJS.UserComponents.SettingsPage = SettingsPage;

})(React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
